def dfs_topological_sort(graph):
    # Helper function for DFS
    def dfs(node):
        visited.add(node)
        for neighbor in graph.get(node, []):
            if neighbor not in visited:
                dfs(neighbor)
        topo_order.append(node)
    
    topo_order = []
    visited = set()

    # Perform DFS for each unvisited node
    for node in graph.keys():
        if node not in visited:
            dfs(node)

    # Reverse the topological order to get correct order
    topo_order.reverse()
    return topo_order

# Example graph represented as an adjacency list
graph = {
    'A': [],
    'B': ['A', 'C','D'],
    'C': ['E'],
    'D': ['A','E'],
    'E': [],
    'F': ['C','E']
}

# Calculate topological order using DFS
topo_order = dfs_topological_sort(graph)
print("Topological order (DFS):", topo_order)